### SendIT Parcel Module API Tests
### This file contains all CRUD operations for testing the Parcel module

### ========================================
### AUTHENTICATION SETUP (Copy tokens from user.http)
### ========================================

### Make sure you have these tokens from user.http:
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxNzk2YTM1Ny1kOGFiLTRmNzQtOGY1MS1lODhhZDg3NzNkYTkiLCJlbWFpbCI6InRlc3R1c2VyQGV4YW1wbGUuY29tIiwicm9sZSI6IlVTRVIiLCJpYXQiOjE3NTM1MjI5NjYsImV4cCI6MTc1MzYwOTM2Nn0.9wh-ncyC-bF5D53Lts0VHksBO1I8SkzjdatvOjaqNuM
 @adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4YzZkYTk2Ny1jYjgzLTQ2NjQtOGU5Yi1mOTVkZTkzZDk2YzciLCJlbWFpbCI6ImRldm1heG1pbGxpYW5tdWlydXJpQGdtYWlsLmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1MzUyMzE1OSwiZXhwIjoxNzUzNjA5NTU5fQ.Yr4oQjrtd3lfvCTTRfkp51Vq0FzmFcItVZU94Ruau2w
 @courierToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NjM5NjRjMi1kODlkLTRlMTItOGFlNi1lYmEwMTUzMjY4YzkiLCJlbWFpbCI6InRlc3Rjb3VyaWVyQGV4YW1wbGUuY29tIiwicm9sZSI6IkNPVVJJRVIiLCJpYXQiOjE3NTM1MjMwNzgsImV4cCI6MTc1MzYwOTQ3OH0.roSed8g-wRrKPjbwiCgcax2Jyk4hKdT9Ry8GIAbqo48

### ========================================
### PARCEL CREATION OPERATIONS
### ========================================

### 1. Create a parcel (User only)
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Electronics package",
  "weight": 2.5,
  "pickupAddressId": "{{pickupAddressId}}",
  "deliveryAddressId": "{{deliveryAddressId}}"
}

### 2. Create another parcel (User only)
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "dcf3d0fe-3311-494e-b2a8-f725c8578726",
  "description": "Documents package",
  "weight": 0.5
}

### 3. Create parcel with minimal data (User only)
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}"
}

### ========================================
### PARCEL RETRIEVAL OPERATIONS
### ========================================

### 4. Get all parcels (Admin - sees all)
GET http://localhost:3000/parcel
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 5. Get all parcels with pagination (Admin)
GET http://localhost:3000/parcel?page=1&limit=5
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 6. Get all parcels with search (Admin)
GET http://localhost:3000/parcel?search=electronics
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 7. Get all parcels filtered by status (Admin)
GET http://localhost:3000/parcel?status=PENDING
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 8. Get user's own parcels (User - sees own sent/received)
GET http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 9. Get courier's assigned parcels (Courier - sees assigned)
GET http://localhost:3000/parcel
Authorization: Bearer {{courierToken}}
Content-Type: application/json

### 10. Get specific parcel by ID (Admin)
GET http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 11. Get specific parcel by ID (User - own parcel)
GET http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 12. Get specific parcel by ID (Courier - assigned parcel)
GET http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{courierToken}}
Content-Type: application/json

### ========================================
### PARCEL UPDATE OPERATIONS (Admin only)
### ========================================

### 13. Update parcel details (Admin only)
PUT http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "description": "Updated electronics package",
  "weight": 3.0,
  "pickupAddressId": "{{newPickupAddressId}}",
  "deliveryAddressId": "{{newDeliveryAddressId}}"
}

### 14. Update parcel status (Admin only)
PUT http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "IN_TRANSIT"
}

### ========================================
### PARCEL STATUS UPDATE OPERATIONS
### ========================================

### 15. Update parcel status to IN_TRANSIT (Admin)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "IN_TRANSIT"
}

### 16. Update parcel status to DELIVERED (Admin)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "DELIVERED"
}

### 17. Update parcel status to CANCELLED (Admin)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "CANCELLED"
}

### 18. Update parcel status to RETURNED (Admin)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "RETURNED"
}

### 19. Update parcel status (Courier - assigned parcels only)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "status": "IN_TRANSIT"
}

### ========================================
### COURIER ASSIGNMENT OPERATIONS (Admin only)
### ========================================

### 20. Assign courier to parcel (Admin only)
PUT http://localhost:3000/parcel/{{parcelId}}/assign-courier
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "courierId": "{{courierId}}"
}

### 21. Reassign courier to parcel (Admin only)
PUT http://localhost:3000/parcel/{{parcelId}}/assign-courier
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "courierId": "{{anotherCourierId}}"
}

### 22. Remove courier assignment (Admin only)
PUT http://localhost:3000/parcel/{{parcelId}}/assign-courier
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "courierId": null
}

### ========================================
### PARCEL DELETION OPERATIONS (Admin only)
### ========================================

### 23. Delete parcel (Admin only) - WARNING: Permanent
DELETE http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### ERROR TESTING
### ========================================

### 24. Try to create parcel as admin (should fail - only users can create)
POST http://localhost:3000/parcel
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Admin trying to create parcel"
}

### 25. Try to create parcel as courier (should fail - only users can create)
POST http://localhost:3000/parcel
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Courier trying to create parcel"
}

### 26. Try to update parcel as user (should fail - only admin can update)
PUT http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "description": "User trying to update parcel"
}

### 27. Try to update parcel as courier (should fail - only admin can update)
PUT http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "description": "Courier trying to update parcel"
}

### 28. Try to assign courier as user (should fail - only admin can assign)
PUT http://localhost:3000/parcel/{{parcelId}}/assign-courier
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "courierId": "{{courierId}}"
}

### 29. Try to assign courier as courier (should fail - only admin can assign)
PUT http://localhost:3000/parcel/{{parcelId}}/assign-courier
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "courierId": "{{courierId}}"
}

### 30. Try to delete parcel as user (should fail - only admin can delete)
DELETE http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 31. Try to delete parcel as courier (should fail - only admin can delete)
DELETE http://localhost:3000/parcel/{{parcelId}}
Authorization: Bearer {{courierToken}}
Content-Type: application/json

### 32. Try to access protected endpoint without token (should fail)
GET http://localhost:3000/parcel
Content-Type: application/json

### 33. Try to access protected endpoint with invalid token (should fail)
GET http://localhost:3000/parcel
Authorization: Bearer invalid-token
Content-Type: application/json

### 34. Try to create parcel with invalid data (should fail)
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "description": "Missing required fields"
}

### 35. Try to update status with invalid status (should fail)
PUT http://localhost:3000/parcel/{{parcelId}}/status
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "status": "INVALID_STATUS"
}

### ========================================
### BULK OPERATIONS
### ========================================

### 36. Create multiple parcels for bulk testing
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Bulk test parcel 1",
  "weight": 1.0
}

###

POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Bulk test parcel 2",
  "weight": 2.0
}

###

POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Bulk test parcel 3",
  "weight": 3.0
}

### 37. Test pagination with multiple parcels
GET http://localhost:3000/parcel?page=1&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

###

GET http://localhost:3000/parcel?page=2&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 38. Test search functionality
GET http://localhost:3000/parcel?search=bulk
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 39. Test status filtering
GET http://localhost:3000/parcel?status=PENDING
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### WORKFLOW TESTING
### ========================================

### 40. Complete parcel workflow test
### Step 1: Create parcel
POST http://localhost:3000/parcel
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "receiverId": "{{receiverUserId}}",
  "description": "Workflow test parcel",
  "weight": 1.5
}

### Step 2: Assign courier (Admin)
PUT http://localhost:3000/parcel/{{workflowParcelId}}/assign-courier
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "courierId": "{{courierId}}"
}

### Step 3: Update status to IN_TRANSIT (Courier)
PUT http://localhost:3000/parcel/{{workflowParcelId}}/status
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "status": "IN_TRANSIT"
}

### Step 4: Update status to DELIVERED (Courier)
PUT http://localhost:3000/parcel/{{workflowParcelId}}/status
Authorization: Bearer {{courierToken}}
Content-Type: application/json

{
  "status": "DELIVERED"
}

### ========================================
### VARIABLES FOR REST CLIENT
### ========================================

### After running the requests, copy the values to these variables:

# @userToken = your_user_jwt_token_here
# @adminToken = your_admin_jwt_token_here
# @courierToken = your_courier_jwt_token_here
# @parcelId = parcel_id_from_response
# @workflowParcelId = parcel_id_for_workflow_testing
# @receiverUserId = receiver_user_id
# @courierId = courier_id
# @anotherCourierId = another_courier_id
# @pickupAddressId = pickup_address_id
# @deliveryAddressId = delivery_address_id
# @newPickupAddressId = new_pickup_address_id
# @newDeliveryAddressId = new_delivery_address_id

### ========================================
### USAGE INSTRUCTIONS
### ========================================

### 1. First, run the user.http file to get authentication tokens
### 2. Update the token variables above with actual values
### 3. Create test users and addresses if needed
### 4. Run the parcel creation requests (1-3)
### 5. Copy parcel IDs to variables for testing
### 6. Test retrieval operations (4-12)
### 7. Test update operations (13-22)
### 8. Test error scenarios (24-35)
### 9. Test bulk operations (36-39)
### 10. Test complete workflow (40)

### Note: Replace all {{variable}} placeholders with actual values from responses 