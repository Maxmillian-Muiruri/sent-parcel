### SendIT User Module API Tests
### This file contains all CRUD operations for testing the User module
### Updated with actual users from the database

### ========================================
### AUTHENTICATION SETUP
### ========================================

### ========================================
### LOGIN WITH EXISTING USERS
### ========================================

### 1. Login as regular user (John Doe)
POST https://send-it-9pei.onrender.com/auth/login
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "password123"
}

### 2. Login as admin user
POST https://send-it-9pei.onrender.com/auth/login
Content-Type: application/json

{
  "email": "admin@sendit.com",
  "password": "admin123"
}

### 3. Login as courier user
POST https://send-it-9pei.onrender.com/auth/login
Content-Type: application/json

{
  "email": "courier@sendit.com",
  "password": "courier123"
}

### 4. Login as Max Millian (existing user)
POST https://send-it-9pei.onrender.com/auth/login
Content-Type: application/json

{
  "email": "devmaxmillianmuiruri@gmail.com",
  "password": "password123"
}

### 5. Login as Brian Mwangi (existing user)
POST https://send-it-9pei.onrender.com/auth/login
Content-Type: application/json

{
  "email": "brianmwangiat033@gmail.com",
  "password": "password123"
}

### ========================================
### REGISTER NEW USERS (if needed)
### ========================================

### 6. Register a new regular user
POST https://send-it-9pei.onrender.com/user/register
Content-Type: application/json

{
  "name": "New Test User",
  "email": "newuser@example.com",
  "password": "password123",
  "phone": "+254700123456"
}

### 7. Register a new admin user
POST https://send-it-9pei.onrender.com/user/register
Content-Type: application/json

{
  "name": "New Admin User",
  "email": "newadmin@sendit.com",
  "password": "admin123",
  "phone": "+254700654321",
  "role": "ADMIN"
}

### 8. Register a new courier user
POST https://send-it-9pei.onrender.com/user/register
Content-Type: application/json

{
  "name": "New Courier Driver",
  "email": "newcourier@sendit.com",
  "password": "courier123",
  "phone": "+254700789012",
  "role": "COURIER"
}

### ========================================
### USER PROFILE OPERATIONS
### ========================================

### 9. Get current user profile (requires auth)
GET https://send-it-9pei.onrender.com/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 10. Update current user profile (requires auth)
PUT https://send-it-9pei.onrender.com/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "name": "John Doe Updated",
  "phone": "+254700123457"
}

### 11. Update current user password (requires auth)
PUT https://send-it-9pei.onrender.com/user/profile/me
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "password": "newpassword123"
}

### ========================================
### ADMIN-ONLY OPERATIONS
### ========================================

### 12. Get all users (Admin only) - Basic
GET https://send-it-9pei.onrender.com/user
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 13. Get all users with pagination (Admin only)
GET https://send-it-9pei.onrender.com/user?page=1&limit=5
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 14. Get all users with search (Admin only)
GET https://send-it-9pei.onrender.com/user?search=john
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 15. Get all users filtered by role (Admin only)
GET https://send-it-9pei.onrender.com/user?role=USER
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 16. Get all couriers (Admin only)
GET https://send-it-9pei.onrender.com/user/couriers/all
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 17. Get all regular users (Admin only)
GET https://send-it-9pei.onrender.com/user/users/regular
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 18. Get users by specific role (Admin only)
GET https://send-it-9pei.onrender.com/user/role/COURIER
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### USER MANAGEMENT OPERATIONS (Admin only)
### ========================================

### 19. Get specific user by ID (Admin or owner)
GET https://send-it-9pei.onrender.com/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 20. Update specific user (Admin only)
PUT https://send-it-9pei.onrender.com/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "John Doe Admin Updated",
  "email": "john.updated@example.com",
  "phone": "+254700123458",
  "role": "COURIER"
}

### 21. Soft delete user (Admin only)
DELETE https://send-it-9pei.onrender.com/user/{{userId}}/soft
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### 22. Hard delete user (Admin only) - WARNING: Permanent
DELETE https://send-it-9pei.onrender.com/user/{{userId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### PASSWORD RESET OPERATIONS
### ========================================

### 23. Request password reset
POST https://send-it-9pei.onrender.com/auth/request-password-reset
Content-Type: application/json

{
  "email": "john.doe@example.com"
}

### 24. Reset password with code
POST https://send-it-9pei.onrender.com/auth/reset-password
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "code": "123456",
  "newPassword": "resetpassword123"
}

### ========================================
### ERROR TESTING
### ========================================

### 25. Try to access admin endpoint as regular user (should fail)
GET https://send-it-9pei.onrender.com/user
Authorization: Bearer {{userToken}}
Content-Type: application/json

### 26. Try to access user endpoint as courier (should fail)
GET https://send-it-9pei.onrender.com/user
Authorization: Bearer {{courierToken}}
Content-Type: application/json

### 27. Try to update another user's profile (should fail)
PUT https://send-it-9pei.onrender.com/user/{{otherUserId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "name": "Unauthorized Update"
}

### 28. Try to register with existing email (should fail)
POST https://send-it-9pei.onrender.com/user/register
Content-Type: application/json

{
  "name": "Duplicate User",
  "email": "john.doe@example.com",
  "password": "password123"
}

### 29. Try to access protected endpoint without token (should fail)
GET https://send-it-9pei.onrender.com/user/profile/me
Content-Type: application/json

### 30. Try to access protected endpoint with invalid token (should fail)
GET https://send-it-9pei.onrender.com/user/profile/me
Authorization: Bearer invalid-token
Content-Type: application/json

### ========================================
### BULK OPERATIONS (Admin only)
### ========================================

### 31. Test pagination with multiple users
GET https://send-it-9pei.onrender.com/user?page=1&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

###

GET https://send-it-9pei.onrender.com/user?page=2&limit=2
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### ========================================
### VARIABLES FOR REST CLIENT
### ========================================

### After running the login requests, copy the access_token values to these variables:

# @userToken = your_user_jwt_token_here
# @adminToken = your_admin_jwt_token_here
# @courierToken = your_courier_jwt_token_here
# @userId = user_id_from_response
# @otherUserId = another_user_id_for_testing

### ========================================
### EXISTING USERS IN DATABASE
### ========================================

### Available users for testing:
### 1. john.doe@example.com (ID: 6) - Role: USER
### 2. admin@sendit.com (ID: 5) - Role: ADMIN
### 3. courier@sendit.com (ID: 14) - Role: COURIER
### 4. devmaxmillianmuiruri@gmail.com (ID: 7) - Role: USER
### 5. brianmwangiat033@gmail.com (ID: 8) - Role: USER
### 6. john@example.com (ID: 20) - Role: USER
### 7. jane@example.com (ID: 21) - Role: USER
### 8. mike@example.com (ID: 22) - Role: USER
### 9. david@courier.com (ID: 23) - Role: COURIER
### 10. sarah@courier.com (ID: 24) - Role: COURIER
### 11. tom@courier.com (ID: 25) - Role: COURIER

### ========================================
### USAGE INSTRUCTIONS
### ========================================

### 1. Run the login requests first (1-5) to get valid tokens
### 2. Copy the access_token values to the variables above
### 3. Run the profile operations (9-11) with user token
### 4. Run the admin operations (12-22) with admin token
### 5. Test error scenarios (25-30)
### 6. Test bulk operations (31)

### Note: Replace {{userId}} and {{otherUserId}} with actual user IDs from responses